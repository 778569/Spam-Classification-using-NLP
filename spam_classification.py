# -*- coding: utf-8 -*-
"""Spam Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16m5KRikNtV6PW4Tc_N0TLtedRsOjegUQ
"""

import pandas as pd
import nltk

df = pd.read_csv("spam.csv" , encoding= "latin-1")



df.head(5)

df.shape

df.drop(columns=['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'],inplace = True)

df.head(5)

df.rename(columns = {'v1' : 'class', 'v2' : 'sms'}, inplace = True)
df.head(5)

df.groupby('class').describe()

df1 = df.drop_duplicates(keep ='first')

df1.groupby('class').describe()

df1["Length"] = df1["sms"].apply(len)

df1.head(5)

df1.hist(column = 'Length', by='class', bins = 150)

from nltk.stem.porter import PorterStemmer

nltk.download('stopwords')
from nltk.corpus import stopwords

nltk.download('punkt')
ps = PorterStemmer

df1.head(5)

# def clean_text(text):

#   text = text.lower()
#   text = nltk.word_tokenize(text)

#   y = []
#   for i in text:
#     if i.isalnum():
#       y.append(i)

#   text = y[:]
#   y.clear()

#   for i in text:
#     # if i not in stopwords.words('english') and i not in string.punctuation:
#     #   y.append(i)
#     if i not in stopwords.words('english') and i not in string.punctuation:
#       y.append(i)

#   text =y[:]
#   y.clear()

#   for i in text:
#     y.append(ps.stem(i))

#   return " ".join(y)


def clean_text(text):
    text = text.lower()
    text = nltk.word_tokenize(text)

    y = []
    for i in text:
        if i.isalnum():
            y.append(i)

    text = y[:]
    y.clear()

    for i in text:
        if i not in stopwords.words('english') and i not in string.punctuation:
            y.append(i)

    text = y[:]
    y.clear()

    ps = PorterStemmer()
    for i in text:
        y.append(ps.stem(i))

    return " ".join(y)

df1['sms_cleaned'] = df1['sms'].apply(clean_text)

df1.head(5)

from sklearn.feature_extraction.text import TfidfVectorizer

tf_vec = TfidfVectorizer(max_features=3000)
X = tf_vec.fit_transform(df1['sms_cleaned']).toarray()

X.shape

"""Learning"""

Y =df1['class'].values

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size=0.2,random_state=2)

from sklearn.naive_bayes import MultinomialNB

model = MultinomialNB()
model.fit(X_train,y_train)

from sklearn.metrics import accuracy_score

y_pred = model.predict(X_test)
print(accuracy_score(y_test, y_pred))